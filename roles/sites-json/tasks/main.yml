---
# Ansible role for getting the numerical site ID (nid) of a site in ACSF.
# https://github.com/SU-SWS/ansible-playbooks
# ===========================================================
#
# The purpose of this role is establish the numerical site ID (nid)
# of the website on ACSF.
#
# INPUTS:
#   acsf_site_name
#   inventory_hostname
#   remote_hostname
#   remote_username
#   sitefactory_environment
#   sites_json_dir
#   stanford_environment
#
# OUTPUTS:
#   cat_output
#   site_id
#
# ALTERNATIVE ROLES:
# --
#
# REQUIREMENTS:
#   define-paths
#   get-sitename
#
# KNOWN ISSUES:

# We know that the "sites.json" file is the canonical source of record for all
# sites on a Factory environment. It even has site information when the site
# is not ready yet. Copy it to local so that we can parse it.
#
# Ex. "leland.03dev.@leland03dev.ssh.enterprise-g1.acquia-sites.com:/mnt/files/leland.03dev/files-private/sites.json /tmp/jbickar/sites.json"
# Ex. "cardinald7.02live.@cardinald702live.ssh.enterprise-g1.acquia-sites.com:/mnt/files/cardinald7.02live/files-private/sites.json /tmp/english/sites.json"
- name: Get sites.json from leland
  command: "scp {{ remote_username }}@{{ remote_hostname }}:{{ sites_json_dir }}/sites.json /tmp/{{ inventory_hostname }}/"

# There are several entries for each site within the sites.json file.
# Fortunately, each entry is on its own line. We know that
# "sitename.cardinalsites.acsitefactory.com" is the canonical name for a given
# site. Grep for that and output it to a file.
- name: Grep sites.json file for our sitename
  shell: "grep {{ acsf_site_name }}.{{ sitefactory_environment }}cardinalsites.acsitefactory.com /tmp/{{ inventory_hostname }}/sites.json > /tmp/{{ inventory_hostname }}/sites_json_raw"
  ignore_errors: yes

# sites_json_raw will be a really long string like this:
# "jbickar.cardinalsites.acsitefactory.com": {"name":"sbitbj3091","flags":{"preferred_domain":true},"conf":{"gardens_site_id":3091,"gardens_db_name":"sbitbj3091","acsf_site_id":3091,"acsf_db_name":"sbitbj3091","site_api_key":"*************************"}},
# Use sed to strip out everything leading up to "acsf_site_id"
# Use sed to strip out everything after the numeric site_id, starting with
# ',"acsf_db_name'
# Use sed to strip out 'acsf_site_id":'
# All we have left is an integer.
- name: Use sed to strip out everything except the site_id
  shell: "{{ item }}"
  with_items:
    - 'sed -i.original -e "s/^.*acsf_site_id/acsf_site_id/g" /tmp/{{ inventory_hostname }}/sites_json_raw'
    - 'sed -i.original -e "s/\,\"acsf_db_name.*$//g" /tmp/{{ inventory_hostname }}/sites_json_raw'
    - 'sed -i.original -e "s/^acsf_site_id\"\://g" /tmp/{{ inventory_hostname }}/sites_json_raw && rm -- "/tmp/{{ inventory_hostname }}/sites_json_raw.original"'

# Cat our file and store it as a variable
- name: Grab site_id from sites_json_raw
  shell: "cat /tmp/{{ inventory_hostname }}/sites_json_raw"
  register: cat_output

- name: Debug cat_output
  debug:
    var: cat_output.stdout
  when: print_debug_messages == "TRUE"

- name: Set site_id
  set_fact:
    site_id: "{{ cat_output.stdout }}"

- name: Debug site_id
  debug:
    var: site_id
  when: print_debug_messages == "TRUE"
