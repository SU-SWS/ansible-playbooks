---
# Ansible role for changing paths after a site has been uploaded.
# https://github.com/SU-SWS/ansible-playbooks
# ==================================================================
#
# This role runs a number of tasks to transform the database in such a way that
# images and absolute paths will work in the new ACSF environment. If any part
# of this role fails for a site, restart from the tag "download-site".
#
# INPUTS:
#   absolute_path_sites_service
#   absolute_vhost_path_sites_service
#   acsf_site_name
#   drush_alias
#   inventory_hostname
#   link_attributes
#   new_absolute_path
#   protocols
#   sar_fulltext_commands
#   sarl_commands
#
# OUTPUTS:
# --
#
# ALTERNATIVE ROLES:
# --
#
# REQUIREMENTS:
# --
#
# KNOWN ISSUES:
# --

##############################################################################
# Database surgery: Find and replace anything that the user may have entered #
# that references the old site.                                              #
# See https://stanfordits.atlassian.net/browse/SITES-248 for details.        #
#                                                                            #
# Text fields should replace http(s)://people.stanford.edu/sunetid with      #
# https://sunetid(-env).cardinalsites.stanford.edu. This will need to be     #
# changed when/if we decide on a URL syntax for people sites. Also, we are   #
# using {{ acsf_site_name }} here because we can rely on it being the same   #
# as the person's SUNetID due to validation rules for SUNetIDs.              #
#                                                                            #
# Text fields should replace http(s)://sites.stanford.edu/sitename with      #
# https://(acsf_site_name|vhost)(-env).cardinalsites.stanford.edu.           #
##############################################################################

# See discussion in https://github.com/SU-SWS/ansible-playbooks/pull/17
# And https://github.com/SU-SWS/ansible-playbooks/pull/22
# Ex: drush sar -y 'https://sites.stanford.edu/g2scd7/' 'https://g2sc-dev.cardinalsites.stanford.edu/'
- name: Update full paths in text
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}{{ absolute_path_sites_service }}/' 'https://{{ new_absolute_path }}/'"
  with_nested:
    - "{{ sar_fulltext_commands }}"
    - "{{ protocols }}"
  notify: Clear site cache

# We are purposefully excluding sar from this because we can't assume that all
# absolute URLs should be relative.
# Also, "with_nested" will loop through all iterations of both arrays, as in:
# sarl/http, sarl/https, sarm/http, sarm/https.
# Ex: drush sarl -y https://sites.stanford.edu/g2scd7/' ''
- name: Remove absolute paths for links and menus
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}{{ absolute_path_sites_service }}/' ''"
  with_nested:
    - "{{ sarl_commands }}"
    - "{{ protocols }}"
  notify: Clear site cache

# Note: I don't think this will ever get run, because we've already replaced
# https://sites.stanford.edu/g2scd7/ with https://g2sc.cardinalsites.stanford.edu/
# These are separated out because we are only using sar (not sarl or sarm) to do
# a string replacement of 'src="https://sites.stanford.edu/sitename/' with 'src="/'
# Ex: drush sar -y 'src="https://sites.stanford.edu/g2scd7/' 'src="/'
- name: Remove absolute paths for href, src, and url attributes
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}{{ item[2] }}{{ absolute_path_sites_service }}/' '{{ item[1] }}/'"
  with_nested:
    - "{{ sar_fulltext_commands }}"
    - "{{ link_attributes }}"
    - "{{ protocols }}"
  notify: Clear site cache

# Have to run these again for links that might include vhosts
# Ex: drush sar -y 'https://g2sc.stanford.edu/' 'https://g2sc-dev.cardinalsites.stanford.edu/'
- name: Update full vhost paths in text
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}{{ absolute_vhost_path_sites_service }}/' '{{ item[1] }}{{ new_absolute_path }}/'"
  with_nested:
    - "{{ sar_fulltext_commands }}"
    - "{{ protocols }}"
  when: vhost is defined
  notify: Clear site cache

# Exclude sar from this
# Ex. drush sarl -y 'https://g2sc.stanford.edu/' ''
- name: Remove absolute vhost paths for links and menus
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}{{ absolute_vhost_path_sites_service }}/' ''"
  with_nested:
    - "{{ sarl_commands }}"
    - "{{ protocols }}"
  when: vhost is defined
  notify: Clear site cache

# Note: I don't think we ever get to this either, because we've already replaced
# https://g2sc.stanford.edu/ with https://g2sc.cardinalsites.stanford.edu/
# These are separated out because we are only using sar (not sarl or sarm) to do
# a string replacement of 'src="https://vhost.stanford.edu/' with 'src="/'
# Ex. drush sar -y 'src="https://g2sc.stanford.edu/' 'src="/'
- name: Remove absolute vhost paths for href, src, and url attributes
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}{{ item[2] }}{{ absolute_vhost_path_sites_service }}/' '{{ item[1] }}/'"
  with_nested:
    - "{{ sar_fulltext_commands }}"
    - "{{ link_attributes }}"
    - "{{ protocols }}"
  when: vhost is defined
  notify: Clear site cache

# One more for things like src="/methane..."
# We only do this if the vhost is defined, because of the edge case where
# inventory_hostname also is a legitimate path for an href, like if the shortname
# is something like "books" and they have a path like
# "https://mysite.stanford.edu/books/my-awesome-book-title"
# Ex. drush sar -y 'src="/g2scd7/' 'src="/'
- name: Remove relative paths for href, src, and url attributes
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}/{{ inventory_hostname }}/' '{{ item[1] }}/'"
  with_nested:
    - "{{ sar_fulltext_commands }}"
    - "{{ link_attributes }}"
  when: vhost is not defined
  notify: Clear site cache

##############################################################################
# Database surgery: Find and replace references to sites/default/files with  #
# the string that ACSF uses for the file_public_path variable. Do NOT do a   #
# global find and replace of the "sites/default/files" string, for users may #
# have linked to files on other websites. We are assuming all absolute       #
# paths have been replaced above by relative paths.                          #
# See https://stanfordits.atlassian.net/browse/SITES-248 for details.        #
##############################################################################

# We already did a global find/replace of vhost.stanford.edu and
# sites.stanford.edu with https://acsf_site_name.cardinalsites.stanford.edu,
# so we just need to find/replace the "sites/default/files" string with
# the ACSF file_public_path value. We probably don't need to loop through
# {{ protocols }} here (http and https), as we should have already handled that
# in "Update full paths in text" or "Update full vhost paths in text". But it's
# cheap to loop through.
# Ex. drush sar -y 'src="https://g2sc.stanford.edu/sites/default/files' 'src="https://g2sc.cardinalsites.stanford.edu/sites/g/files/sbiybj5000986/f'
- name: Replace absolute sites/default/files with path to files directory
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}{{ item[2] }}{{ new_absolute_path }}/sites/default/files' '{{ item[1] }}{{ item[2] }}{{ new_absolute_path }}/{{ file_public_path.stdout | replace(' ','') }}'"
  with_nested:
    - "{{ sar_fulltext_commands }}"
    - "{{ link_attributes }}"
    - "{{ protocols }}"

# Same here: we already replaced absolute references in href and src
# attributes, so we only need to replace the "sites/default/files" string
# with the ACSF file_public_path value.
# Ex. drush sar -y 'src="/sites/default/files' 'src="/sites/g/files/sbiybj5000986/f'
- name: Replace relative /sites/default/files paths with path to files directory
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}/sites/default/files' '{{ item[1] }}/{{ file_public_path.stdout | replace(' ','') }}'"
  with_nested:
    - "{{ sar_fulltext_commands }}"
    - "{{ link_attributes }}"
  notify: Clear site cache

# Same here: we already replaced absolute references in href and src
# attributes, so we only need to replace the "sites/default/files" string
# with the ACSF file_public_path value. We do this again in case someone
# entered src="sites/default/files/..."
# Ex. drush sar -y 'src="sites/default/files' 'src="/sites/g/files/sbiybj5000986/f'
- name: Replace relative sites/default/files paths with path to files directory
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}sites/default/files' '{{ item[1] }}/{{ file_public_path.stdout | replace(' ','') }}'"
  with_nested:
    - "{{ sar_fulltext_commands }}"
    - "{{ link_attributes }}"
  notify: Clear site cache

# We already replaced relative references in href and src attributes (like
# src="/methane/), but we only did it if the vhost is defined, because of the
# edge case where inventory_hostname also is a legitimate path for an href.
# Here we more broadly replace the "/inventory_hostname/sites/default/files" string
# with the ACSF file_public_path value.
# Ex. drush sar -y 'src="/methane/sites/default/files' 'src="/sites/g/sbiybj5000986/f'
- name: Replace relative /inventory_hostname/default/files paths with path to files directory
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}/{{ inventory_hostname }}/sites/default/files' '{{ item[1] }}/{{ file_public_path.stdout | replace(' ','') }}'"
  with_nested:
    - "{{ sar_fulltext_commands }}"
    - "{{ link_attributes }}"
  notify: Clear site cache

# We already replaced absolute references in menus and links
# attributes, so we only need to replace relative references to
# the "sites/default/files" string with the ACSF file_public_path value.
# The --regex option limits replacement to only those fields that match the
# regular expression.
- name: Replace link and menu items with new files path
  shell: "{{ drush_alias }} {{ item[0] }} -y --regex='^sites/default/files' '{{ file_public_path.stdout | replace(' ','') }}'"
  with_together:
    - "{{ sarl_commands }}"
  notify: Clear site cache

# Ex. drush @acsf.test.cardinald7.eao scr /var/www/html/cardinald7.02test/scripts/js-injector.php
- name: Save modified JS Injector rules to disk
  shell: "{{ drush_alias }} scr {{ scripts_dir }}/js-injector.php"
  notify: Clear site cache
