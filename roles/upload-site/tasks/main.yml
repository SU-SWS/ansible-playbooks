---
# Ansible role for uploading the database and files to Site Factory.
# https://github.com/SU-SWS/ansible-playbooks
# ==================================================================
#
# This role uploads the database and files from local to Site Factory. It also
# runs a number of tasks to transform the database in such a way that images
# and absolute paths will work in the new ACSF environment. If any part of this
# role fails for a site, restart from the tag "upload-site".
#
# INPUTS:
#   acsf_site_name
#   inventory_hostname
#   sitefactory_environment
#   drush_environment
#   server_alias
#   site_prefix
#   stack
#   server
#   dept_site
#   wait_time
#
# OUTPUTS:
#   files_public_path
#
# ALTERNATIVE ROLES:
# --
#
# REQUIREMENTS:
# --
#
# KNOWN ISSUES:
# --

- name: Drop database in Site Factory and install new database
  shell: "drush @acsf{{ drush_environment }}.{{ stack }}.{{ acsf_site_name }} {{ item }}"
  with_items:
    - "-y sql-drop"
    - "sqlc < /tmp/{{ inventory_hostname }}/dbdump.sql"
  notify: Clear site cache

- name: Set site up as a Department site
  shell: "drush @acsf{{ drush_environment }}.{{ stack }}.{{ acsf_site_name }} {{ item }}"
  with_items:
    - "-y vset install_profile stanford_dept"
    - "cc all"
    - "sqlq 'update system set status=\"1\" where name=\"stanford_dept\"'"
    - "rr"
  when: dept_site == "TRUE"
  notify: Clear site cache

- name: Do post-database-restore tasks
  shell: "drush @acsf{{ drush_environment }}.{{ stack }}.{{ acsf_site_name }} {{ item }}"
  with_items:
    - "-y updb"
    - "-y en acsf nobots stanford_ssp paranoia"
    - "ev 'acsf_openid_allow_local_user_logins();'"
    - 'ev "_paranoia_remove_risky_permissions();"'
    - "-y dis googleanalytics pingdom_rum"
    - "sqlq 'truncate table webauth_roles_history'"
    - "sspwmd"
  notify: Clear site cache

# Copy files first so that they exist and Drupal can find them if needed
- name: Copy files from local to Site Factory
  shell: "drush -y rsync /tmp/{{ inventory_hostname }}/files/ @acsf{{ drush_environment }}.{{ stack }}.{{ acsf_site_name }}:%files/"
  notify: Clear site cache

##############################################################################
# Database surgery: Find and replace anything that the user may have entered #
# that references the old site.                                              #
# See https://stanfordits.atlassian.net/browse/SITES-248 for details.        #
##############################################################################
- name: Find any absolute paths and replace them - people sites
  shell: "drush @acsf{{ drush_environment }}.{{ stack }}.{{ acsf_site_name }} {{ item }}"
  with_items:
    # Text fields should replace http(s)://people.stanford.edu/sunetid with
    # https://sunetid.cardinalsites.stanford.edu. This will need to be changed
    # when/if we decide on a URL syntax for people sites. Also, we are using
    # {{ acsf_site_name }} here because we can rely on it being the same as
    # the person's SUNetID due to validation rules for SUNetIDs.
    - "sar -y 'http://people.stanford.edu/{{ inventory_hostname }}/' 'https://{{ acsf_site_name }}{{ stanford_environment }}.cardinalsites.stanford.edu/'"
    - "sar -y 'https://people.stanford.edu/{{ inventory_hostname }}/' 'https://{{ acsf_site_name }}{{ stanford_environment }}.cardinalsites.stanford.edu/'"
    # Menus and links should replace http(s)://people.stanford.edu/sunetid with nothing.
    - "sarm -y 'http://people.stanford.edu/{{ inventory_hostname }}/' ''"
    - "sarm -y 'https://people.stanford.edu/{{ inventory_hostname }}/' ''"
    - "sarl -y 'http://people.stanford.edu/{{ inventory_hostname }}/' ''"
    - "sarl -y 'https://people.stanford.edu/{{ inventory_hostname }}/' ''"
  when:
    site_prefix == "dp"
  notify: Clear site cache

- name: Find any absolute paths and replace them - group and dept sites
  shell: "drush @acsf{{ drush_environment }}.{{ stack }}.{{ acsf_site_name }} {{ item }}"
  with_items:
    # Text fields should replace http(s)://sites.stanford.edu/sitename with
    # https://acsf_site_name.cardinalsites.stanford.edu. Do nothing for vhosts;
    # references will point to the on-prem site before cutover, and to the ACSF
    # site after cutover (note that this is an assumption). Also, we are using
    # {{ acsf_site_name }} here because we can rely on it existing, regardless
    # whether there's a vhost.
    - "sar -y 'http://sites.stanford.edu/{{ inventory_hostname }}/' 'https://{{ acsf_site_name }}{{ stanford_environment }}.cardinalsites.stanford.edu/'"
    - "sar -y 'https://sites.stanford.edu/{{ inventory_hostname }}/' 'https://{{ acsf_site_name }}{{ stanford_environment }}.cardinalsites.stanford.edu/'"
    # Menus and links should replace http(s)://sites.stanford.edu/sitename with nothing.
    - "sarm -y 'http://sites.stanford.edu/{{ inventory_hostname }}/' ''"
    - "sarm -y 'https://sites.stanford.edu/{{ inventory_hostname }}/' ''"
    - "sarl -y 'http://sites.stanford.edu/{{ inventory_hostname }}/' ''"
    - "sarl -y 'https://sites.stanford.edu/{{ inventory_hostname }}/' ''"
  when:
    site_prefix == "ds"
  notify: Clear site cache

- name: Find any vhost absolute paths in menus and links and replace them
  shell: "drush @acsf{{ drush_environment }}.{{ stack }}.{{ acsf_site_name }} {{ item }}"
  with_items:
    # Do nothing for vhosts; references will point to the on-prem site before
    # cutover, and to the ACSF site after cutover (note that this is an
    # assumption).
#    - "sar -y 'http://{{ vhost }}.stanford.edu/' '/'"
#    - "sar -y 'https://{{ vhost }}.stanford.edu/' '/'"
    - "sarm -y 'http://{{ vhost }}.stanford.edu/' ''"
    - "sarm -y 'https://{{ vhost }}.stanford.edu/' ''"
    - "sarl -y 'http://{{ vhost }}.stanford.edu/' ''"
    - "sarl -y 'https://{{ vhost }}.stanford.edu/' ''"
  when:
    vhost is defined
  notify: Clear site cache

- name: Find any relative paths in text fields and replace them
  shell: "drush @acsf{{ drush_environment }}.{{ stack }}.{{ acsf_site_name }} {{ item }}"
  with_items:
    - "sar -y 'href=\"/{{ inventory_hostname }}/' 'href=\"/'"
    - "sar -y 'src=\"/{{ inventory_hostname }}/' 'src=\"/'"
    - "sar -y 'url=\"/{{ inventory_hostname }}/' 'url=\"/'"
  notify: Clear site cache

##############################################################################
# Database surgery: Find and replace references to sites/default/files with  #
# the string that ACSF uses for the file_public_path variable. Do NOT do a   #
# global find and replace of the "sites/default/files" string, for users may #
# have linked to files on other websites.                                    #
# See https://stanfordits.atlassian.net/browse/SITES-248 for details.        #
##############################################################################

- name: Get public files directory
  shell: "drush @acsf{{ drush_environment }}.{{ stack }}.{{ acsf_site_name }} status --fields='File directory path' --field-labels=0 --strict=0"
  register: file_public_path

- name: Print file_public_path
  debug:
    msg: "File public path: {{ file_public_path.stdout }}"

- name: Be sure response does not include drush warnings
  fail:
    msg: "There appear to be drush warning messages cluttering the file_public_path variable"
  when: file_public_path.stdout | search('The following module is missing')

- name: Replace sites/default/files with path to files directory
  shell: "drush @acsf{{ drush_environment }}.{{ stack }}.{{ acsf_site_name }} {{ item }}"
  with_items:
    # We already did a global find/replace of vhost.stanford.edu and
    # sites.stanford.edu with https://acsf_site_name.cardinalsites.stanford.edu,
    # so we just need to find/replace the "sites/default/files" string with
    # the ACSF file_public_path value.
    - "sar -y 'href=\"https://{{ acsf_site_name }}{{ stanford_environment }}.cardinalsites.stanford.edu/sites/default/files' 'href=\"/{{ file_public_path.stdout | replace(' ','') }}'"
    - "sar -y 'src=\"https://{{ acsf_site_name }}{{ stanford_environment }}.cardinalsites.stanford.edu/sites/default/files' 'src=\"/{{ file_public_path.stdout | replace(' ','') }}'"
    - "sar -y 'url=\"https://{{ acsf_site_name }}{{ stanford_environment }}.cardinalsites.stanford.edu/sites/default/files' 'src=\"/{{ file_public_path.stdout | replace(' ','') }}'"
    # Same here: we already replaced absolute references in href and src
    # attributes, so we only need to replace the "sites/default/files" string
    # with the ACSF file_public_path value.
#    - "sar -y 'href=\"/{{ inventory_hostname }}/sites/default/files' 'href=\"/{{ file_public_path.stdout | replace(' ','') }}'"
#    - "sar -y 'src=\"/{{ inventory_hostname }}/sites/default/files' 'src=\"/{{ file_public_path.stdout | replace(' ','') }}'"
    - "sar -y 'href=\"/sites/default/files' 'href=\"/{{ file_public_path.stdout | replace(' ','') }}'"
    - "sar -y 'src=\"/sites/default/files' 'src=\"/{{ file_public_path.stdout | replace(' ','') }}'"
    - "sar -y 'url=\"/sites/default/files' 'href=\"/{{ file_public_path.stdout | replace(' ','') }}'"
    # Same here: we already replaced absolute references in menus and links
    # attributes, so we only need to replace the "sites/default/files" string
    # with the ACSF file_public_path value. The --regex option limits
    # replacement to only those fields that match the regular expression.
    - "sarl -y --regex='^sites/default/files' 'sites/default/files' '{{ file_public_path.stdout | replace(' ','') }}'"
    - "sarm -y --regex='^sites/default/files' 'sites/default/files' '{{ file_public_path.stdout | replace(' ','') }}'"
  notify: Clear site cache
