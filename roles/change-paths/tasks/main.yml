---
# Ansible role for changing paths after a site has been uploaded.
# https://github.com/SU-SWS/ansible-playbooks
# ==================================================================
#
# This role runs a number of tasks to transform the database in such a way that
# images and absolute paths will work in the new ACSF environment. If any part
# of this role fails for a site, restart from the tag "download-site".
#
# INPUTS:
#   acsf_site_name
#   inventory_hostname
#   sitefactory_environment
#   drush_environment
#   server_alias
#   site_prefix
#   stack
#   server
#   dept_site
#   wait_time
#
# OUTPUTS:
#   file_public_path
#
# ALTERNATIVE ROLES:
# --
#
# REQUIREMENTS:
# --
#
# KNOWN ISSUES:
# --

##############################################################################
# Database surgery: Find and replace anything that the user may have entered #
# that references the old site.                                              #
# See https://stanfordits.atlassian.net/browse/SITES-248 for details.        #
#                                                                            #
# Text fields should replace http(s)://people.stanford.edu/sunetid with      #
# https://sunetid(-env).cardinalsites.stanford.edu. This will need to be     #
# changed when/if we decide on a URL syntax for people sites. Also, we are   #
# using {{ acsf_site_name }} here because we can rely on it being the same   #
# as the person's SUNetID due to validation rules for SUNetIDs.              #
#                                                                            #
# Text fields should replace http(s)://sites.stanford.edu/sitename with      #
# https://(acsf_site_name|vhost)(-env).cardinalsites.stanford.edu.           #
##############################################################################

# Ex: sites
- name: Set sites_service variable
  set_fact:
    sites_service: "{% if site_prefix=='dp' %}people{% elif site_prefix=='ds'%}sites{% endif %}"

# Ex: g2sc.stanford.edu
# Found example of a site with a vhost, hard linking to images by non-vhost path.
- name: Set absolute vhost path from sites service
  set_fact:
    absolute_vhost_path_sites_service: "{{ vhost }}.stanford.edu"
  when: vhost is defined

# Ex: sites.stanford.edu/g2scd7
- name: Set absolute non-vhost path from sites service
  set_fact:
    absolute_path_sites_service: "{{ sites_service }}.stanford.edu/{{ inventory_hostname }}"

# Ex: g2sc-dev.cardinalsites.stanford.edu
- name: Set absolute path for testing
  set_fact:
    absolute_path_testing: "{% if vhost is defined %}{{ vhost }}{% else %}{{ acsf_site_name }}{% endif %}-{{ acsf_environment }}.cardinalsites.stanford.edu"

# Ex: g2sc.stanford.edu
- name: Set absolute path for production
  set_fact:
    absolute_path_prod: "{% if vhost is defined %}{{ vhost }}{% else %}{{ acsf_site_name }}{% endif %}.stanford.edu"

# Ex: g2sc-dev.cardinalsites.stanford.edu if migrating to dev
- name: Set new absolute path based on destination
  set_fact:
    new_absolute_path: "{% if acsf_environment == '' %}{{ absolute_path_prod }}{% else %}{{ absolute_path_testing }}{% endif %}"

- name: Debug absolute path for site
  debug:
    msg: "Absolute path: {{ new_absolute_path }}"

# Ex: drush @acsf.dev.cardinald7.g2scd7
- name: Set drush alias
  set_fact:
    drush_alias: "drush @acsf{{ drush_environment }}.{{ stack }}.{{ acsf_site_name }}"

# See discussion in https://github.com/SU-SWS/ansible-playbooks/pull/17
# And https://github.com/SU-SWS/ansible-playbooks/pull/22
# TODO: Determine how to treat for final migration (SITES-465)
# Ex: drush sar -y 'https://sites.stanford.edu/g2scd7' 'https://g2sc-dev.cardinalsites.stanford.edu/'
- name: Update full paths in text
  shell: "{{ drush_alias }} sar -y '{{ item }}{{ absolute_path_sites_service }}/' 'https://{{ new_absolute_path }}/'"
  with_items:
   - "{{ protocols }}"

# We are purposefully excluding sar from this because we can't assume that all
# absolute URLs should be relative.
# Also, "with_nested" will loop through all iterations of both arrays, as in:
# sarl/http, sarl/https, sarm/http, sarm/https.
# Ex: drush sarl -y https://sites.stanford.edu/g2scd7' ''
- name: Remove absolute paths for links and menus
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}{{ absolute_path_sites_service }}/' ''"
  with_nested:
    - [ "sarl", "sarm" ]
    - "{{ protocols }}"
  notify: Clear site cache

# These are separated out because we are only using sar (not sarl or sarm) to do
# a string replacement of 'src="https://sites.stanford.edu/sitename/' with 'src="/'
# TODO: fix this, it's still not right. It's searching for src="sites.stanford.edu..."
# TODO: Loop through http/https because it's possible that someone entered
# src="http://sites.stanford.edu/foo". Use with_nested?
# Ex: drush sar -y 'src="https://sites.stanford.edu/g2scd7' ''
- name: Remove absolute paths for href, src, and url attributes
  shell: "{{ drush_alias }} sar -y '{{ item[0] }}/{{ absolute_path_sites_service }}/' '{{ item[0] }}/'"
  with_together:
    - "{{ link_attributes }}"
  notify: Clear site cache

# Have to run these again for links that might include vhosts
# TODO: See todos in above command
# Ex: drush sar -y 'https://g2sc.stanford.edu' 'https://g2sc-dev.cardinalsites.stanford.edu/'
- name: Update full vhost paths in text
  shell: "{{ drush_alias }} sar -y '{{ item }}{{ absolute_vhost_path_sites_service }}/' '{{ item }}{{ new_absolute_path }}/'"
  with_items:
   - "{{ protocols }}"
  when: vhost is defined

# Exclude sar from this
- name: Remove absolute vhost paths for links and menus
  shell: "{{ drush_alias }} {{ item[0] }} -y '{{ item[1] }}{{ absolute_vhost_path_sites_service }}/' ''"
  with_nested:
    - [ "sarl", "sarm" ]
    - "{{ protocols }}"
  notify: Clear site cache
  when: vhost is defined

# These are separated out because we are only using sar (not sarl or sarm) to do
# a string replacement of 'src="https://vhost.stanford.edu/' with 'src="/'
# TODO: fix this, it's still not right. It's searching for src="sites.stanford.edu..."
# TODO: Loop through http/https because it's possible that someone entered
# src="http://vhost.stanford.edu/". Use with_nested?
- name: Remove absolute vhost paths for href, src, and url attributes
  shell: "{{ drush_alias }} sar -y '{{ item[0] }}/{{ absolute_vhost_path_sites_service }}/' '{{ item[0] }}/'"
  with_together:
    - "{{ link_attributes }}"
  notify: Clear site cache
  when: vhost is defined

# One more for things like src="/methane..."
- name: Remove relative paths for href, src, and url attributes
  shell: "{{ drush_alias }} sar -y '{{ item[0] }}/{{ inventory_hostname }}/' '{{ item[0] }}/'"
  with_together:
    - "{{ link_attributes }}"
  when: vhost is not defined
  notify: Clear site cache

##############################################################################
# Database surgery: Find and replace references to sites/default/files with  #
# the string that ACSF uses for the file_public_path variable. Do NOT do a   #
# global find and replace of the "sites/default/files" string, for users may #
# have linked to files on other websites. We are assuming all absolute       #
# paths have been replaced above by relative paths.                          #
# See https://stanfordits.atlassian.net/browse/SITES-248 for details.        #
##############################################################################

- name: Get public files directory
  shell: "drush @acsf{{ drush_environment }}.{{ stack }}.{{ acsf_site_name }} status --fields='File directory path' --field-labels=0 --strict=0"
  register: file_public_path

- name: Print file_public_path
  debug:
    msg: "File public path: {{ file_public_path.stdout }}"

- name: Be sure response does not include drush warnings
  fail:
    msg: "There appear to be drush warning messages cluttering the file_public_path variable"
  when: file_public_path.stdout | search('The following module is missing')

# We already did a global find/replace of vhost.stanford.edu and
# sites.stanford.edu with https://acsf_site_name.cardinalsites.stanford.edu,
# so we just need to find/replace the "sites/default/files" string with
# the ACSF file_public_path value.
# TODO: Determine how to treat for final migration (SITES-465)
- name: Replace absolute sites/default/files with path to files directory
  shell: "{{ drush_alias }} sar -y '{{ item[0] }}{{ item[1] }}{{ new_absolute_path }}/sites/default/files' '{{ item[0] }}{{ item[1] }}{{ new_absolute_path }}/{{ file_public_path.stdout | replace(' ','') }}'"
  with_nested:
    - "{{ link_attributes }}"
    - "{{ protocols }}"

# Same here: we already replaced absolute references in href and src
# attributes, so we only need to replace the "sites/default/files" string
# with the ACSF file_public_path value.
- name: Replace relative sites/default/files paths with path to files directory
  shell: "{{ drush_alias }} sar -y '{{ item[0] }}/sites/default/files' '{{ item[0] }}/{{ file_public_path.stdout | replace(' ','') }}'"
  with_together:
    - "{{ link_attributes }}"
  notify: Clear site cache

# We already replaced absolute references in menus and links
# attributes, so we only need to replace relative references to
# the "sites/default/files" string with the ACSF file_public_path value.
# The --regex option limits replacement to only those fields that match the
# regular expression.
- name: Replace link and menu items with new files path
  shell: "{{ drush_alias }} {{ item }} -y --regex='^sites/default/files' '{{ file_public_path.stdout | replace(' ','') }}'"
  with_items:
    - "sarl"
    - "sarm"
  notify: Clear site cache
